import os
import sys
import site
from distutils.version import LooseVersion


def _update_environment(artifacts_root_dir, package_dirs):

    for path in sys.path[:]:
        if path.startswith(artifacts_root_dir + os.path.sep):
            sys.path.remove(path)

    for package_dir in package_dirs:
        sys.path.append(package_dir)

    pythonpath = os.getenv('PYTHONPATH')
    pythonpath_parts = pythonpath.split(os.pathsep) if pythonpath else []

    for path in pythonpath_parts:
        if path.startswith(artifacts_root_dir + os.path.sep):
            pythonpath_parts.remove(path)

    pythonpath_parts.extend(package_dirs)

    os.environ['PYTHONPATH'] = os.pathsep.join(
        pythonpath_parts
    )


def _list_package_dirs(artifacts_root_dir):

    package_dirs = []

    if not os.path.exists(artifacts_root_dir):
        return package_dirs

    for artifact_name in os.listdir(artifacts_root_dir):

        artifact_dir = os.path.join(artifacts_root_dir, artifact_name)

        versions = os.listdir(artifact_dir)
        if not versions:
            continue

        latest_version = max(versions, key=lambda x: LooseVersion(x.lstrip('v')))

        version_dir = os.path.join(artifact_dir, latest_version)
        package_dirs.append(version_dir)

    return package_dirs


def main():
    resources_dir = os.path.join(os.path.expanduser('~/.bd-pipeline'), 'resources')
    if not os.path.exists(resources_dir):
        return

    libs_dir = os.path.join(
        resources_dir, 'python', 'libs',
        '{}.{}'.format(sys.version_info.major, sys.version_info.minor)
    )
    if os.path.exists(libs_dir):
        site.addsitedir(libs_dir)

    artifacts_root_dir = os.path.join(resources_dir, 'python', 'artifacts')

    package_dirs = _list_package_dirs(artifacts_root_dir)
    if not package_dirs:
        return

    _update_environment(artifacts_root_dir, package_dirs)


main()